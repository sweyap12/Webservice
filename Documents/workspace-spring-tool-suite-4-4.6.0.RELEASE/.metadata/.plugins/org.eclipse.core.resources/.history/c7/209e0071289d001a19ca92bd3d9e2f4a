package test.courseapi;

import static org.junit.jupiter.api.Assertions.*;

import org.json.JSONException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.junit.jupiter.api.Test;

import Test.courseapi.Employee;
import Test.courseapi.TopicController;

import static org.mockito.Mockito.*;

import java.io.Reader;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

class MockTestDemo {

	@Test
	void test() throws JSONException {
	//  create mock
		TopicController mocked_api = mock(TopicController.class);
		String expected_json_string = "{\"AllEmployeeDetails\":[{\"id\":\"1\",\"name\":\"A\"},{\"id\":\"2\",\"name\":\"B\"},{\"id\":\"4\",\"name\":\"C\"}]}";
        org.json.JSONObject expected = new org.json.JSONObject(expected_json_string);
        
        //some code
//        JSONParser parser = new JSONParser();
//        Object obj  = parser.parse(expected_json_string);
        JSONArray array = new JSONArray();
        array.add(expected);
        JSONObject jo = new JSONObject();
        jo.putAll((Map) array);

        // define return value for method getUniqueId()
        when(mocked_api.getTopics()).thenReturn(jo);

        System.out.println(jo);
        
        // use mock in test....
        assertEquals(mocked_api.getTopics(), expected_json_string);
	}

}
